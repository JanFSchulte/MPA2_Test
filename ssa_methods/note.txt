###############################################################################

ssa.inject.digital_pulse([10])

ssa.i2c.strip_write(register="StripControl1", field='ENFLAGS', strip='all', data=0)

ssa.i2c.strip_write(register="StripControl1", field='ENFLAGS', strip=100, data=0b01001)

ssa.chip.strip.set_sampling_mode(100, 'edge')
ssa.chip.strip.set_hipcut(7, 100)
ssa.chip.strip.set_pattern_injection('all', 0b1, 0b00000000)

strips = []
for i in range(1, 121): strips.append(  ssa.i2c.strip_read(register="StripControl1", strip=i) )

ssa.i2c.peri_write(register="control_2", field='CalPulse_duration', data=1)
ssa.i2c.peri_read(register="control_2", field='CalPulse_duration')

ssa.readout.cluster_data_delay_new()

ssa.readout.cluster_data(raw=1)[0]

###############################################################################

ssa.pwr.set_supply(d=voltage)
ssa.pwr.set_dvdd(0.8, chip='MPA')
self.reset()
ssa.pwr.set_dvdd(1.0, chip='MPA')
ssa.chip.ctrl.set_sampling_deskewing_chargepump(1)


ssa.chip.reset()

ssa.chip.ctrl.init_slvs(0b111)
ssa.chip.ctrl.activate_readout_shift()
ssa.chip.ctrl.set_shift_pattern_all(0b10000000)
ssa.chip.ctrl.init_slvs(0b111)
ssa.chip.ctrl.set_t1_clock_output_select('clock')
ssa.chip.ctrl.set_sampling_deskewing_coarse(0)
ssa.chip.ctrl.set_sampling_deskewing_fine(enable=1, bypass=0, value=0)
ssa.chip.ctrl.set_sampling_deskewing_fine(enable=1, bypass=0, value=15)

while 1: ssa.readout.l1_data(latency = 1)
ssa.chip.ctrl.set_termination_enable(clock=1, T1=1)
ssa.chip.ctrl.set_t1_sampling_edge('rising')


###############################################################################


def f(n):
    ssa.pwr.on()
    ssa.reset()
    ssa.init()
    ssa.biascal.get_voltage('VBG')
    ssa.measure.adc_mesure_vref(chip='chip_{:d}/chip_{:d}'.format(n,n) )
    ssa.pwr.off()


=====================================================

| Chip | Column 2     | Column 3     |
| :------------- | :----------: | -----------: |
|  Cell Contents | More Stuff   | And Again    |
| You Can Also   | Put Pipes In | Like this \| |

| Chip    |   VBG     | Vref MIN | Vref MAX |   mV/LSB | Iref MIN | Iref MAX |  mv/LSB  |  INL MAX |  DNL MAX |
| ------- | --------- |--------- |--------- |--------- | -------- |--------- |--------- |--------- |--------- |
| chip_1  |   268.061 | 682.470  | 885.908  |   6.566  |   75.150 |  97.388  |   0.718  |   0.056  |   0.074  |
| chip_2  |   266.837 | 694.367  | 899.259  |   6.631  |   77.367 |  99.938  |   0.729  |   0.141  |   0.184  |
| chip_3  |   266.757 | 674.910  | 877.279  |   6.526  |   75.876 |  98.328  |   0.724  |   0.086  |   0.083  |
| chip_5  |   266.436 | 653.450  | 850.164  |   6.341  |   74.147 |  96.050  |   0.705  |   0.080  |   0.059  |
| chip_6  |   266.938 | 665.079  | 865.719  |   6.469  |   74.440 |  96.569  |   0.714  |   0.046  |   0.051  |
| chip_7  |   266.205 | 690.311  | 894.000  |   6.561  |   77.527 |  99.948  |   0.723  |   0.181  |   0.231  |
| chip_8  |   266.160 | 673.862  | 877.833  |   6.578  |   75.484 |  97.979  |   0.726  |   0.125  |   0.127  |
| chip_9  |   266.572 | 663.490  | 864.411  |   6.497  |   75.649 |  98.176  |   0.729  |   0.115  |   0.164  |
| chip_10 |   265.841 | 663.614  | 864.295  |   6.499  |   73.101 |  94.912  |   0.706  |   0.132  |   0.157  |
| chip_11 |   264.803 | 676.777  | 876.824  |   6.472  |   77.004 |  99.299  |   0.721  |   0.164  |   0.233  |
| chip_12 |   266.228 | 663.384  | 863.801  |   6.500  |   75.526 |  97.884  |   0.724  |   0.187  |   0.309  |
| chip_13 |   266.689 | 667.480  | 867.853  |   6.454  |   76.095 |  98.477  |   0.721  |   0.117  |   0.148  |
| chip_14 |   265.948 | 665.082  | 863.621  |   6.419  |   74.200 |  96.014  |   0.705  |   0.126  |   0.142  |
| chip_15 |   266.367 | 650.453  | 846.719  |   6.353  |   73.538 |  95.322  |   0.704  |   0.111  |   0.152  |


##### LSB measurement:
| Chip    |   VBG    | LSB mean | LSB std  | LSB rms  | LSB mean | LSB std  | LSB rms  |VREF Min |VREF Max |
| ------- | -------- |--------- |--------- |--------- | -------- |--------- |--------- |-------- |-------- |
|         |   mV     | VREF(mv) | VREF(mv) | VREF(mv) | IREF(mv) | IREF(mv) | IREF(mv) |   (mv)  |    (mv) |
|chip_1   |  268.061 |  6.563   |  0.198   |  6.565   |  0.717   |    0.029 |    0.718 | 682.470 | 885.908 |
|chip_2   |  266.837 |  6.609   |  0.339   |  6.618   |  0.704   |    0.045 |    0.705 | 694.367 | 899.259 |
|chip_3   |  266.757 |  6.528   |  0.230   |  6.532   |  0.719   |    0.048 |    0.721 | 674.910 | 877.279 |
|chip_5   |  266.436 |  6.346   |  0.176   |  6.348   |  0.721   |    0.055 |    0.723 | 653.450 | 850.164 |
|chip_6   |  266.938 |  6.472   |  0.148   |  6.474   |  0.722   |    0.033 |    0.723 | 665.079 | 865.719 |
|chip_7   |  266.205 |  6.571   |  0.450   |  6.586   |  0.704   |    0.027 |    0.704 | 690.311 | 894.000 |
|chip_8   |  266.160 |  6.580   |  0.306   |  6.587   |  0.703   |    0.038 |    0.704 | 673.862 | 877.833 |
|chip_9   |  266.572 |  6.481   |  0.298   |  6.488   |  0.728   |    0.047 |    0.730 | 663.490 | 864.411 |
|chip_10  |  265.841 |  6.474   |  0.347   |  6.483   |  0.724   |    0.030 |    0.725 | 663.614 | 864.295 |
|chip_11  |  264.803 |  6.453   |  0.425   |  6.467   |  0.707   |    0.022 |    0.707 | 676.777 | 876.824 |
|chip_12  |  266.228 |  6.465   |  0.471   |  6.482   |  0.714   |    0.020 |    0.714 | 663.384 | 863.801 |
|chip_13  |  266.689 |  6.464   |  0.306   |  6.471   |  0.723   |    0.047 |    0.725 | 667.480 | 867.853 |
|chip_14  |  265.948 |  6.404   |  0.267   |  6.410   |  0.726   |    0.031 |    0.726 | 665.082 | 863.621 |
|chip_15  |  266.367 |  6.331   |  0.325   |  6.340   |  0.727   |    0.034 |    0.728 | 650.453 | 846.719 |



|chip_1   |   6.563 |  0.198 |  6.565 |  0.717 |  0.029 |  0.718 |
|chip_2   |   6.609 |  0.339 |  6.618 |  0.728 |  0.047 |  0.730 |
|chip_3   |   6.528 |  0.230 |  6.532 |  0.724 |  0.030 |  0.725 |
|chip_5   |   6.346 |  0.176 |  6.348 |  0.707 |  0.022 |  0.707 |
|chip_6   |   6.472 |  0.148 |  6.474 |  0.714 |  0.020 |  0.714 |
|chip_7   |   6.571 |  0.450 |  6.586 |  0.723 |  0.047 |  0.725 |
|chip_8   |   6.580 |  0.306 |  6.587 |  0.726 |  0.031 |  0.726 |
|chip_9   |   6.481 |  0.298 |  6.488 |  0.727 |  0.034 |  0.728 |
|chip_10  |   6.474 |  0.347 |  6.483 |  0.704 |  0.045 |  0.705 |
|chip_11  |   6.453 |  0.425 |  6.467 |  0.719 |  0.048 |  0.721 |
|chip_12  |   6.465 |  0.471 |  6.482 |  0.721 |  0.055 |  0.723 |
|chip_13  |   6.464 |  0.306 |  6.471 |  0.722 |  0.033 |  0.723 |
|chip_14  |   6.404 |  0.267 |  6.410 |  0.704 |  0.027 |  0.704 |
|chip_15  |   6.331 |  0.325 |  6.340 |  0.703 |  0.038 |  0.704 |




##### Reference DAC LSB meas overall:
| VBG mean | VBG std  | VBG rms  | LSB mean  | LSB std  | LSB rms  | LSB mean | LSB std  | LSB rms  |
| -------- | -------- | -------- | --------- |--------- |--------- | -------- |--------- |--------- |
| mV       | mV       | mV       |  VREF(mv) | VREF(mv) | VREF(mv) | IREF(mv) | IREF(mv) | IREF(mv) |
| 266.290  | 0.537863 | 266.291  |     6.481 |  0.298   |  6.488   |  0.727   |    0.034 |    0.728 |




|                 | mean (mV)   | std (mV)    | rms (mV)    |
| --------------- | ----------- | ----------- | ----------- |
| VBG             | 266.290     | 0.53786     |  266.291    |
| LSB(VREF)       | 6.481       | 0.298       |    6.488    |
| LSB(IREF)       | 0.727       | 0.034       |    0.728    |
| MAX(VREF)       | 670.338     | 12.197      |  670.449    |
| MIN(VREF)       | 871.263     | 14.454      |  871.383    |




266.290  | 0.53786  | 266.291  |
6.481    | 0.298    | 6.488    |
0.727    | 0.034    | 0.728    |
670.338  | 12.197   |670.449  |
871.263  | 14.454   |871.383  |





##################################################################

ssa.chip.analog.adc_set_referenence(23)
ssa.chip.analog.adc_set_trimming(8)
ssa.chip.analog.adc_sample_histogram(runtime=3600*16, freq=0.1)


####################################################################












[266.29084615384613, 0.5378637010867584, 266.29138935138764]

Total




vref_min   ,  694.4973
vref_max   ,  899.2907
vref_gain  ,    6.6226
iref_min   ,
iref_max   ,
iref_gain  ,
VBG        ,  266.9204


2       vref_min        vref_max        vref_gain

vref_min,   694.4973 | 694.4973
vref_max,   899.2907 | 899.2907
vref_gain,    6.6226 |   6.6217
VBG,        266.9204 | 266.92040000000003

3

,0,1,2
0,    ,VREF,IREF
1,vref_min,674.9903,674.9903
2,vref_max,877.2202,877.2202
3,vref_gain,6.521306909908459,6.520105205199465
4,vref_INL,0.10089111451866906,0.08012189344313825
5,vref_DNL,0.06717898787469712,0.06615419461212424
6,VBG,266.77889999999996,266.77889999999996

5

,0,1,2
0,    ,VREF,IREF
1,vref_min,654.066,654.066
2,vref_max,850.5695,850.5695
3,vref_gain,6.338751942829072,6.354076539603288
4,vref_INL,0.08338833659451339,0.10775561073193529
5,vref_DNL,0.07601136875424563,0.06534609014853898
6,VBG,266.5066,266.5066


utils.activate_I2C_chip(self.fc7)



ssa.pwr.off()

ssa.pwr.mainpoweron()

time.sleep(0.2); ssa.pwr.set_pvdd( 1.2 )
time.sleep(0.2); ssa.pwr.set_dvdd( 1.2 )
time.sleep(0.2); ssa.pwr.set_avdd( 1.2 )

ssa.pwr.get_power()
ssa.pwr.reset()
ssa.pwr.get_power()


ssa.try_i2c()




hex(ssa.ctrl.I2C.peri_write( register = 'mask_strip', field = False, data=0xff))
hex(ssa.ctrl.I2C.peri_read(  register = 'mask_strip', field = False))


for i in range(120):
    p1 = random.randint(1,255)
    p2 = random.randint(1,255)
    time.sleep(0.01); hex(ssa.ctrl.I2C.strip_write( strip = 50, register = 'DigCalibPattern_L', field = False, data=p1 ))
    time.sleep(0.01); hex(ssa.ctrl.I2C.strip_write( strip = 50, register = 'DigCalibPattern_H', field = False, data=p2 ))
    time.sleep(0.01); r1 = ssa.ctrl.I2C.strip_read(  strip = 50, register = 'DigCalibPattern_L', field = False )
    time.sleep(0.01); r2 = ssa.ctrl.I2C.strip_read(  strip = 50, register = 'DigCalibPattern_H', field = False )
    #time.sleep(0.01); print('{:s}, {:s}'.format(r1,r2))
    if(p1 == r1): print('OK {:d}'.format(r1))
    else:         print('ER {:d}'.format(r1))
    if(p2 == r2): print('OK {:d}'.format(r2))
    else:         print('ER {:d}'.format(r2))
    print('---------------------------')


ssa.ctrl.init_slvs(current=0b111)
ssa.pwr.get_power()

bin(ssa.ctrl.I2C.peri_write(register = 'mask_strip',  field = False, data=0xff))
bin(ssa.ctrl.I2C.peri_write(register = 'mask_peri_D', field = False, data=0xff))
bin(ssa.ctrl.I2C.peri_write(register = 'mask_peri_A', field = False, data=0xff))


for i in range(120):
    p1 = random.randint(1,255)
    p2 = random.randint(1,255)
    time.sleep(0.01); hex(ssa.ctrl.I2C.strip_write( strip = i, register = 'DigCalibPattern_L', field = False, data=p1 ))
    time.sleep(0.01); hex(ssa.ctrl.I2C.strip_write( strip = i, register = 'DigCalibPattern_H', field = False, data=p2 ))
    time.sleep(0.01); r1 = ssa.ctrl.I2C.strip_read(  strip = i, register = 'DigCalibPattern_L', field = False )
    time.sleep(0.01); r2 = ssa.ctrl.I2C.strip_read(  strip = i, register = 'DigCalibPattern_H', field = False )
    #time.sleep(0.01); print('{:s}, {:s}'.format(r1,r2))
    if(p1 == r1): print('OK {:d}'.format(r1))
    else:         print('ER {:d}'.format(r1))
    if(p2 == r2): print('OK {:d}'.format(r2))
    else:         print('ER {:d}'.format(r2))
    print('---------------------------')


# MASK ##################################################
bin(ssa.ctrl.I2C.peri_write(register = 'mask_strip',  field = False, data=0xff))
bin(ssa.ctrl.I2C.peri_write(register = 'mask_peri_D', field = False, data=0xff))
bin(ssa.ctrl.I2C.peri_write(register = 'mask_peri_A', field = False, data=0xff))
bin(ssa.ctrl.I2C.peri_read(register = 'mask_strip',  field = False))
bin(ssa.ctrl.I2C.peri_read(register = 'mask_peri_D', field = False))
bin(ssa.ctrl.I2C.peri_read(register = 'mask_peri_A', field = False))
#######################################################################


#termination ##################################################
bin(ssa.ctrl.I2C.peri_write(register = 'SLVS_pad_current_Clk_T1',  field = False, data=0b11111111))
#######################################################################



#SLVS ##################################################
ssa.ctrl.init_slvs(current=0b111)
#######################################################################


# alignment ###########################################################
self = ssa.ctrl
bin(ssa.ctrl.I2C.peri_write(register = 'control_1',  field = False, data=0b11010))
self.set_shift_pattern([0x80]*8)
ssa.readout.all_lines()
ssa.ctrl.align_out()
ssa.readout.all_lines()
bin(ssa.ctrl.I2C.peri_write(register = 'control_1',  field = False, data=0b11000))
#######################################################################



#######################################################################
ssa.pwr.get_power()

bin(ssa.ctrl.I2C.peri_read(register = 'control_2',  field = False))

#config strip
for i in range(0, 120):
    ssa.i2c.strip_write(register="StripControl1", field=False, strip=i, data=0b0)

ssa.i2c.strip_write(register="StripControl1", field=False, strip=1, data=0b1001)
ssa.i2c.strip_write(register="StripControl1", field=False, strip=2, data=0b1001)
ssa.i2c.strip_write(register="StripControl1", field=False, strip=3, data=0b1001)
ssa.i2c.strip_write(register="StripControl1", field=False, strip=4, data=0b1001)
ssa.i2c.strip_write(register="StripControl1", field=False, strip=5,  data=0b1001)
ssa.i2c.strip_write(register="StripControl1", field=False, strip=6, data=0b1001)
ssa.i2c.strip_write(register="StripControl1", field=False, strip=7, data=0b1001)
ssa.i2c.strip_write(register="StripControl1", field=False, strip=8, data=0b1001)

ssa.readout.all_lines(l1data=1, cluster=0)
ssa.readout.l1_data(display_raw=1, display=1)

bin(ssa.i2c.strip_read(register="StripControl1", field=False, strip=60) )

#calpulse duration
bin(ssa.ctrl.I2C.peri_write(register = 'control_2',  field = False, data= 0b11110101))
bin(ssa.ctrl.I2C.peri_read(register = 'control_2',  field = False))

#######################################################################
hex(ssa.i2c.peri_read(register="Bias_THDAC", field=False))
ssa.i2c.peri_write(register="Bias_THDAC", field=False, data=5)

#######################################################################



###### contatori #####################3
ssa.i2c.strip_write(register="StripControl1", field=False, strip=50, data=0b00011101)
ssa.i2c.strip_write(register="StripControl1", field=False, strip=51, data=0b00011101)
ssa.i2c.strip_write(register="StripControl1", field=False, strip=52, data=0b00011101)
ssa.i2c.strip_write(register="StripControl1", field=False, strip=53, data=0b00011101)

ssa.i2c.peri_write(register="Bias_THDAC", field=False, data=5)
hex(ssa.i2c.peri_read(register="Bias_THDAC", field=False))

ssa.i2c.peri_write(register="Bias_CALDAC", field=False, data=100)
hex(ssa.i2c.peri_read(register="Bias_CALDAC", field=False))

bin(ssa.ctrl.I2C.peri_write(register = 'control_1',  field = False, data= 0b11001 ))
bin(ssa.ctrl.I2C.peri_read(register = 'control_1',  field = False ))

Configure_TestPulse_SSA(50,50,500, 1000 ,0,0,0)

ssa_cal.fc7.open_shutter(2);
ssa_cal.fc7.SendCommand_CTRL("start_trigger");
ssa_cal.fc7.close_shutter(2);

ssa.i2c.strip_read( register="AC_ReadCounterLSB", field=False, strip=50)
ssa.i2c.strip_read( register="AC_ReadCounterLSB", field=False, strip=51)
ssa.i2c.strip_read( register="AC_ReadCounterLSB", field=False, strip=52)


##### BIST ####################################################


time.sleep(0.2); ssa.pwr.set_dvdd( 0.82 )

time.sleep(0.001); bin(ssa.ctrl.I2C.peri_write(register = 'mask_strip',  field = False, data=0xff))
time.sleep(0.001); bin(ssa.ctrl.I2C.peri_write(register = 'mask_peri_D', field = False, data=0xff))
time.sleep(0.001); bin(ssa.ctrl.I2C.peri_write(register = 'mask_peri_A', field = False, data=0xff))


def BIST_LOOP():
    time.sleep(0.001); ssa.pwr.reset(display=False)
    time.sleep(0.001); bin(ssa.ctrl.I2C.peri_write(register = 'mask_strip',  field = False, data=0xff))
    time.sleep(0.001); bin(ssa.ctrl.I2C.peri_write(register = 'mask_peri_D', field = False, data=0xff))
    time.sleep(0.001); bin(ssa.ctrl.I2C.peri_write(register = 'mask_peri_A', field = False, data=0xff))
    # bin(ssa.ctrl.I2C.peri_read(register = 'mask_peri_D', field = False))
    # bin(ssa.ctrl.I2C.peri_read(register = 'mask_peri_A', field = False))
    time.sleep(0.001);  bin(ssa.i2c.peri_read(register="bist_output", field=False))
    time.sleep(0.001);  bin(ssa.i2c.peri_read(register="ClkTree_control", field=False))
    time.sleep(0.001);  bin(ssa.ctrl.I2C.peri_write(register = 'ClkTree_control', field = False, data=0b01010100))
    error = 0
    for i in range(100000):
        time.sleep(0.001);  bin(ssa.ctrl.I2C.peri_write(register = 'bist_memory_sram_mode',  field = False, data= 0x00 ))
        time.sleep(0.001);  bin(ssa.ctrl.I2C.peri_write(register = 'bist_memory_sram_start', field = False, data= 0x00 ))
        time.sleep(0.001);  bin(ssa.ctrl.I2C.peri_write(register = 'bist_memory_sram_mode',  field = False, data= 0x0f ))
        time.sleep(0.001);  hex(ssa.i2c.peri_read(register="bist_memory_sram_mode", field=False))
        time.sleep(0.001);  bin(ssa.ctrl.I2C.peri_write(register = 'bist_memory_sram_start', field = False, data= 0x0f ))
        #time.sleep(0.001); hex(ssa.i2c.peri_read(register="bist_memory_sram_start", field=False))
        #time.sleep(0.001); hex(ssa.i2c.peri_read(register="bist_output", field=False))
        time.sleep(0.001);
        for N in range(0,16):
            reg = "bist_memory_sram_output_L_{:X}".format(N)
            r = ssa.i2c.peri_read(register=reg, field=False)
            if( r != 0 ):
                error += 1
                print( str(N) + '--' + bin(r))
        print('-----------------------')
        print(error)


BIST_LOO





#if((tbconfig.VERSION['SSA'] >= 2))
#	print("Mask test:")
#	for iter in range(repeat):
#		data = randint(1,255)
#		d.append( data )
#		for k in range(8):
#			field = 'b{:0d}'.format(k)
#			w.append( self.I2C.peri_write(register = 'configuration_test', field = field, data = data))










utils.activate_I2C_chip(self.fc7)
self.fc7.SendCommand_CTRL("stop_trigger")
self.ssa.readout.cluster_data(initialize=True)
self.ssa.ctrl.activate_readout_async()
time.sleep(0.001)
self.ssa.readout.counters_fast([], shift=0, initialize=True)

self.fc7.close_shutter(8)
self.fc7.clear_counters(8)
self.ssa.strip.set_cal_strips(mode = 'counter', strip = 'all')
self.ssa.ctrl.set_cal_pulse(amplitude = cal_val, duration = 15, delay = 'keep')
self.ssa.ctrl.set_threshold(threshold);  # set the threshold

self.fc7.clear_counters(8, 5)
self.fc7.open_shutter(8, 5)
self.fc7.SendCommand_CTRL("start_trigger")
self.fc7.close_shutter(8,5)

failed, couters = self.ssa.readout.counters_fast(striplist, shift = countershift, initialize = 0)
#failed, couters = self.ssa.readout.counters_via_i2c(striplist)



def scurves(self, cal_ampl = [50], mode = 'all', nevents = 1000, rdmode = 'fast', display = False, plot = True, filename = 'TestLogs/Chip-0', filename2 = '', msg = "", striplist = range(1,121), speeduplevel = 2, countershift = 0, set_trim = False, d19c_firmware_issue_repeat = True, start_threshold = 0):
    '''	cal_ampl  -> int |'baseline'  -> Calibration pulse charge (in CALDAC LSBs)
        mode      -> 'all' | 'sbs'   -> All strips together or one by one
        nevents   -> int number      -> Number of calibration pulses (default 1000)
        striplist -> [list 1:120]    -> Select specific strip (default all)
        rdmode    -> 'fast' | 'i2c'  -> Select if use fast readout or I2C readout
        display   -> True | False    -> Display additional informations
        plot      -> True | False    -> Plot S-Curve
        filename  -> False | string  -> If not False the data is vritten in the file named by 'string'
        filename2 -> 'string'        -> Additional string to complete the filename
        msg       -> internal use
    '''
    #self.fc7.reset()
    evaluate_sc = True
    evaluate_cn = 0
    while(evaluate_sc):
        evaluate_cn += 1
        time_init = time.time()
        utils.activate_I2C_chip(self.fc7)
        # first go to the async mode
        self.fc7.SendCommand_CTRL("stop_trigger")
        self.ssa.readout.cluster_data(initialize=True)
        self.ssa.ctrl.activate_readout_async()
        ermsg = ''
        baseline = False
        if isinstance(cal_ampl, int):
            cal_ampl = [cal_ampl]
        elif cal_ampl == 'baseline':
            baseline = True
            cal_ampl = [0]
            if(set_trim):
                self.set_trimming(0, display=False)
                self.set_trimming(31, striplist, display=False)
                time.sleep(0.001)
        elif not isinstance(cal_ampl, list):
            utils.print_error("-> ssa_cal_utility/scurves wrong cal_alpl parameter")
            return False
        if(rdmode == 'fast'):
            self.ssa.readout.counters_fast([], shift=0, initialize=True)
        #Configure_TestPulse_MPA_SSA(200, nevents)# init firmware cal pulse
        Configure_TestPulse_SSA(50,50,500,nevents,0,0,0)

        for cal_val in  cal_ampl:
            # close shutter and clear counters
            self.fc7.close_shutter(8)
            self.fc7.clear_counters(8)
            # init chip cal pulse
            self.ssa.strip.set_cal_strips(mode = 'counter', strip = 'all')
            self.ssa.ctrl.set_cal_pulse(amplitude = cal_val, duration = 15, delay = 'keep')

            #Configure_TestPulse_MPA_SSA(200, nevents)
            #Configure_TestPulse_SSA(50,50,500,1000,0,0,0)

            # then let's try to measure the scurves
            scurves = np.zeros((256,120), dtype=np.int)
            threshold = start_threshold
            utils.ShowPercent(0, 256, "Calculating S-Curves "+msg+" ")
            while (threshold < 256):
                time_cur = time.time()
                strout = ""
                error = False
                #print("Setting the threshold to ", threshold, ", sending the test pulse and reading the counters")
                strout += "threshold = " + str(threshold) + ".   "
                self.ssa.ctrl.set_threshold(threshold);  # set the threshold
                #time.sleep(0.05);
                if (not baseline and (mode == 'all')):	# provide cal pulse to all strips together
                    self.fc7.clear_counters(8, 5)
                    self.fc7.open_shutter(8, 5)
                    #Configure_TestPulse_SSA(50,50,500,1000,0,0,0)
                    #Configure_TestPulse_MPA(200, 200, 200, nevents, enable_L1 = 0, enable_rst = 0, enable_init_rst = 0)
                    self.fc7.SendCommand_CTRL("start_trigger") # send sequence of NEVENTS pulses
                    test = 1
                    t = time.time()
                    timeout = 500
                    while (test):
                        timeout-=1
                        if(timeout<=0):
                            test=0; break
                        test = (self.fc7.read("stat_fast_fsm_state"))
                        time.sleep(0.001)
                        #print(test,)
                        if((not test) and (((time.time()-t)*1E3)<2) ): # D19C firmware issue
                            time.sleep(0.005)
                            test = self.fc7.read("stat_fast_fsm_state")
                            if(not test):
                                self.fc7.SendCommand_CTRL("start_trigger")
                                t = time.time()
                                test = 1
                    #print(((time.time()-t)*1E3))
                    self.fc7.close_shutter(8,5)
                elif(not baseline and (mode == 'sbs')): # provide cal pulse strip by strip
                    self.fc7.clear_counters(1)
                    for s in striplist:
                        self.ssa.strip.set_cal_strips(mode = 'counter', strip = s )
                        time.sleep(0.01);
                        self.fc7.open_shutter(2); time.sleep(0.01);
                        self.fc7.SendCommand_CTRL("start_trigger"); time.sleep(0.01); # send sequence of NEVENTS pulses
                        while(self.fc7.read("stat_fast_fsm_state") != 0):
                            time.sleep(0.01)
                        self.fc7.close_shutter(2); time.sleep(0.01);

                elif(baseline and (mode == 'all')):
                    self.fc7.clear_counters(2); #time.sleep(0.01);
                    self.fc7.open_shutter(2);   #time.sleep(0.01);
                    self.fc7.close_shutter(2);  #time.sleep(0.01);

                elif(baseline and (mode == 'sbs')):
                    # with this method, the time between open and close shutter
                    # change from strip to strip due to the communication time
                    # so do not use to compare the counters value,
                    # from the point of view of the atandard deviation is not influent
                    self.fc7.clear_counters(2); time.sleep(0.01);
                    for s in striplist:
                        # all trims at 0 and one at 31 to remove the crosstalks effect
                        if(set_trim):
                            self.ssa.strip.set_trimming('all', 0)
                            self.ssa.strip.set_trimming(s, 31)
                        time.sleep(0.01);
                        self.fc7.open_shutter(2);  time.sleep(0.01);
                        self.fc7.close_shutter(2); time.sleep(0.01);
                if(rdmode == 'fast'):
                    failed, scurves[threshold] = self.ssa.readout.counters_fast(striplist, shift = countershift, initialize = 0)
                elif(rdmode == 'i2c'):
                    failed, scurves[threshold] = self.ssa.readout.counters_via_i2c(striplist)
                else:
                    failed = True

                if (failed):
                    error = True; ermsg = '[Counters readout]';
                else:
                    if(d19c_firmware_issue_repeat):
                        for s in range(0,120):
                            if ((threshold > 0) and (scurves[threshold,s])==0 and (scurves[threshold-1,s]>(nevents*0.8)) ) :
                                error = True; ermsg = '[Condition 1]' + str(scurves[threshold,s]) +'  ' + str(scurves[threshold-1,s])
                            elif ((not baseline) and (threshold > 10) and (scurves[threshold,s])== 2*scurves[threshold-1,s] and (scurves[threshold,s] != 0)):
                                error = True; ermsg = '[Condition 2]'

                if (error == True):
                    threshold = (threshold-1) if (threshold>0) else 0
                    utils.ShowPercent(threshold, 256, "Failed to read counters for threshold " + str(threshold) + ". Redoing. " +  ermsg)
                    #time.sleep(0.5)
                    continue
                else:
                    strout += "Counters samples = 1->[" + str(scurves[threshold][0]) + "]  30->[" + str(scurves[threshold][29]) + "]  60->[" + str(scurves[threshold][59]) + "]  90->[" + str(scurves[threshold][89]) + "]  120->[" + str(scurves[threshold][119]) + "]"

                if(speeduplevel >= 2 and threshold > 32):
                    if( (scurves[threshold-8: threshold ] == np.zeros((8,120), dtype=np.int)).all() ):
                        break

                if (display == True):
                    utils.ShowPercent(threshold, 256, strout)
                else:
                    utils.ShowPercent(threshold, 256, "Calculating S-Curves "+msg+"                                      ")
                threshold = threshold + 1

            utils.ShowPercent(256, 256, "Done calculating S-Curves "+msg+"                                            ")

            if( isinstance(filename, str) ):
                fo = "../SSA_Results/" + filename + "_scurve_" + filename2 + "__cal_" + str(cal_val) + ".csv"
                CSV.ArrayToCSV (array = scurves, filename = fo, transpose = True)
                utils.print_log( "->  Data saved in" + fo)

        if(np.sum(scurves[:,10:110] )<100):
            if(evaluate_cn>4):
                utils.print_error("-X\tError in S-Curve evaluation {:d}".format(np.sum(scurves[50:100,:])))
                return False
            utils.print_warning("-X\tIssue in S-Curve evaluation. Reiterating.. {:d}".format(np.sum(scurves[50:100,:])))
        else: evaluate_sc = False
    for i in range(120):
        if(np.sum(scurves[:,i])==0):
            utils.print_warning("X>\tScurve consant to 0 for strip {:d}".format(i))
    #### print("\n\n" , (time.time()-time_init))
    if(plot == True): plt.clf()
    plt.ylim(0,3000); plt.xlim(0,150);
    plt.plot(scurves)
    if(plot == True): plt.show()
    self.scurve_data     = scurves
    self.scurve_nevents  = nevents
    self.scurve_calpulse = cal_ampl
    return scurves




result = {0.85: [0.851, 0, 0], 0.849: [0.851, 0, 0], 0.848: [0.85, 0, 0], 0.847: [0.848, 0, 0], 0.846: [0.849, 0, 0], 0.845: [0.846, 0, 0], 0.844: [0.846, 0, 0], 0.843: [0.844, 0, 0], 0.842: [0.844, 0, 0], 0.841: [0.844, 0, 0], 0.84: [0.841, 0, 0], 0.839: [0.84, 0, 0], 0.838: [0.84, 0, 0], 0.837: [0.839, 0, 0], 0.836: [0.838, 0, 0], 0.835: [0.836, 0, 0], 0.834: [0.836, 0, 0], 0.833: [0.835, 0, 0], 0.832: [0.834, 0, 0], 0.831: [0.831, 0, 0], 0.83: [0.834, 0, 0], 0.829: [0.831, 0, 0], 0.828: [0.83, 0, 0], 0.827: [0.829, 0, 0], 0.826: [0.829, 0, 0], 0.825: [0.825, 0, 0], 0.824: [0.826, 0, 0], 0.823: [0.824, 0, 0], 0.822: [0.824, 0, 0], 0.821: [0.823, 0, 0], 0.82: [0.823, 0, 0], 0.819: [0.821, 0, 0], 0.818: [0.819, 0, 0], 0.817: [0.819, 0, 0], 0.816: [0.818, 0, 0], 0.815: [0.818, 0, 0], 0.814: [0.816, 0, 0], 0.813: [0.815, 0, 0], 0.8119999999999999: [0.814, 0, 0], 0.8109999999999999: [0.812, 0, 0], 0.8099999999999999: [0.812, 0, 0], 0.8089999999999999: [0.811, 0, 0], 0.8079999999999999: [0.81, 0, 0], 0.8069999999999999: [0.809, 0, 0], 0.8059999999999999: [0.807, 0, 0], 0.8049999999999999: [0.806, 0, 0], 0.8039999999999999: [0.806, 0, 0], 0.8029999999999999: [0.805, 0, 0], 0.802: [0.805, 0, 0], 0.8009999999999999: [0.802, 0, 0], 0.8: [0.802, 0, 0], 0.7989999999999999: [0.801, 0, 0], 0.798: [0.8, 0, 0], 0.7969999999999999: [0.799, 0, 0], 0.796: [0.797, 0, 0], 0.795: [0.797, 0, 0], 0.794: [0.795, 0, 0], 0.793: [0.795, 1, 0], 0.792: [0.795, 20, 0], 0.791: [0.792, 373, 300], 0.79: [0.792, 1554, 1600], 0.789: [0.791, 1600, 1600], 0.788: [0.791, 1600, 1600], 0.787: [0.789, 1600, 1600], 0.786: [0.787, 1600, 1600], 0.785: [0.786, 1600, 1600], 0.784: [0.787, 1600, 1600], 0.783: [0.785, 557, 300], 0.782: [0.785, 16, 0], 0.781: [0.782, 0, 0], 0.78: [0.782, 0, 0], 0.779: [0.781, 0, 1], 0.778: [0.781, 6, -1], 0.777: [0.78, 28, 4], 0.776: [0.779, 18, 22], 0.775: [0.777, -1, -1], 0.774: [0.777, -1, -1], 0.773: [0.776, -1, -1], 0.772: [0.774, 743, 802], 0.771: [0.772, 1519, 1500], 0.77: [0.771, 1600, 1600], 0.769: [0.772, 1600, 1600], 0.768: [0.769, 1600, 1600], 0.767: [0.77, 1600, 1600], 0.766: [0.768, 1600, 1600], 0.765: [0.768, 1600, 1600], 0.764: [0.766, 1600, 1600], 0.763: [0.766, 1600, 1600], 0.762: [0.765, 1600, 1600], 0.761: [0.764, 1600, 1600], 0.76: [0.763, 1600, 1600], 0.759: [0.761, 1600, 1600], 0.758: [0.761, 1600, 1600], 0.757: [0.759, 1600, 1600], 0.756: [0.758, 1600, 1600], 0.755: [0.759, 1600, 1600], 0.754: [0.756, 1600, 1600], 0.753: [0.756, 1600, 1600], 0.752: [0.754, 1600, 1600], 0.751: [0.754, 1600, 1600], 0.75: [0.753, 1600, 1600]}




for i in range(0, 63):
    r = ssa.analog.adc_set_trimming(i, 1)
    print(ssa.analog.adc_measeure('DVDD', nsamples=10))





def f():
    result={}
    for vin in [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]:
        print("set input voltage to {:5.3f}".format(vin))
        time.sleep(3)
        result[vin] = ssa.analog.adc_measeure('TESTPAD', nsamples=100)
        print('-------------------------------------------------')
    return result

a = f()

for i in range(0, 63):
    r = ssa.analog.adc_set_trimming(i, 1)
    print(ssa.analog.adc_measeure('DVDD', nsamples=10))





def f():
    result={}
    for vin in [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]:
        print("set input voltage to {:5.3f}".format(vin))
        time.sleep(3)
        result[vin] = ssa.analog.adc_measeure('TESTPAD', nsamples=100)
        print('-------------------------------------------------')
    return result

v00 = f()

for i in range(0, 63):
    r = ssa.analog.adc_set_trimming(i, 1)
    print(ssa.analog.adc_measeure('DVDD', nsamples=10))





def f():
    result={}
    for vin in [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]:
        print("set input voltage to {:5.3f}".format(vin))
        time.sleep(3)
        result[vin] = ssa.analog.adc_measeure('TESTPAD', nsamples=100)
        print('-------------------------------------------------')
    return result

a = f()

for i in range(0, 63):
    r = ssa.analog.adc_set_trimming(i, 1)
    print(ssa.analog.adc_measeure('DVDD', nsamples=10))



##############################################################################
ADC CALIBRATION

def f():
    result={}
    for vin in [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]:
        print("set input voltage to {:5.3f}".format(vin))
        time.sleep(3)
        result[vin] = ssa.chip.analog.adc_measure('TESTPAD', nsamples=100)
        print('-------------------------------------------------')
    return result

v63 = f()

v00 = {0.0: 22.44, 0.1: 646.34, 0.2: 1306.04, 0.3: 1979.96, 0.4: 2647.79, 0.5: 3305.76, 0.6: 3969.82, 0.7: 4095.00, 0.8: 4095.0}
v07 = {0.0: 11.07, 0.1: 600.59, 0.2: 1229.38, 0.3: 1854.88, 0.4: 2474.18, 0.5: 3105.9,  0.6: 3721.64, 0.7: 4093.68, 0.8: 4095.0}
v15 = {0.0: 11.23, 0.1: 566.62, 0.2: 1143.58, 0.3: 1729.33, 0.4: 2310.25, 0.5: 2891.36, 0.6: 3471.86, 0.7: 4046.68, 0.8: 4095.0}
v23 = {0.0: 11.13, 0.1: 531.79, 0.2: 1067.91, 0.3: 1608.77, 0.4: 2159.76, 0.5: 2706.12, 0.6: 3250.75, 0.7: 3789.76, 0.8: 4094.33}
v31 = {0.0: 14.57, 0.1: 498.44, 0.2: 1007.13, 0.3: 1519.30, 0.4: 2028.33, 0.5: 2532.94, 0.6: 3053.69, 0.7: 3558.16, 0.8: 4060.9}

plt.plot(list(v00.keys()), list(v00.values()) , '-o' )
plt.plot(list(v07.keys()), list(v07.values()) , '-o' )
plt.plot(list(v15.keys()), list(v15.values()) , '-o' )
plt.plot(list(v23.keys()), list(v23.values()) , '-o' )
plt.plot(list(v31.keys()), list(v31.values()) , '-o' )

v00 = {0.0: 1.94, 0.1: 482.82, 0.2: 995.25, 0.3: 1500.31, 0.4: 2003.95, 0.5: 2512.59, 0.6: 3019.9, 0.7: 3512.24, 0.8: 4028.32}
v31 = {0.0: 1.91, 0.1: 487.29, 0.2: 995.07, 0.3: 1500.13, 0.4: 2003.38, 0.5: 2509.31, 0.6: 3022.16, 0.7: 3513.89, 0.8: 4029.1}
v63 = {0.0: 4.28, 0.1: 490.28, 0.2: 1001.03, 0.3: 1502.21, 0.4: 2011.07, 0.5: 2516.31, 0.6: 3022.0, 0.7: 3517.88, 0.8: 4029.76}

for VDT in [v00, v31, v63]:
    x=[]; y=[];
    for voltage in VDT:
        x.append(voltage)
        y.append(VDT[voltage])
    plt.plot(x, y, 'x')


plt.show()





ssa.chip.fc7.write('cnfg_phy_Delay_Select',  (1 << 16) | ( 0  << 8) | 0  )
ssa.chip.fc7.write("ctrl_phy_phase_tune_again", 1)
ssa.seuutil.Run_Test_SEU(delay=74, stop_if_fifo_full=0, run_time= 1, strip=[10])
