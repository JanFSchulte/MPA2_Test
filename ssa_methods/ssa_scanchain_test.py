import time
import sys
import inspect
import numpy as np
import matplotlib.pyplot as plt
import ctypes
from itertools import groupby
from operator import itemgetter

from utilities.tbsettings import *
from d19cScripts.fc7_daq_methods import *
from d19cScripts.MPA_SSA_BoardControl import *
from myScripts.BasicD19c import *
from myScripts.ArrayToCSV import *
from myScripts.Utilities import *

class SSA_scanchain_test():

	##############################################################
	def __init__(self, ssa, I2C, FC7, pwr):
		self.ssa = ssa; self.I2C = I2C; self.fc7 = FC7; self.pwr = pwr;
		self.seu_check_time = -1; self.last_test_duration = 0;

	##############################################################

	def launch_all_scanchain_all_vectors(self,
		file_scan    = "ssa_methods/Configuration/vectors_for_test_scan.txt",
		file_reset   = "ssa_methods/Configuration/vectors_for_test_reset.txt",
		file_capture = "ssa_methods/Configuration/vectors_for_test_capture.txt"):
		rt1 = self.launch_scan_test_all_vectors(filename=file_scan, nvectors=1)
		rt2 = self.launch_reset_test_all_vectors(filename=file_reset, nvectors=2)
		rt3 = self.launch_capture_all_vectors(filename=file_capture, nvectors=725)
		#return rt1, rt2, rt3

	def enable_dio5_scanchain(self, threshold=127):
		time.sleep(0.1)
		self.fc7.write("system_fmc_l12_pwr_en" ,1)
		self.fc7.write("system_fmc_l8_pwr_en" ,1)
		self.fc7.write("cnfg_dio5_en" ,1)
		self.fc7.write("cnfg_dio5_ch1_out_en",  1)
		self.fc7.write("cnfg_dio5_ch2_out_en",  0)
		self.fc7.write("cnfg_dio5_ch3_out_en",  1)
		self.fc7.write("cnfg_dio5_ch4_out_en",  1)
		self.fc7.write("cnfg_dio5_ch5_out_en",  1)
		self.fc7.write("cnfg_dio5_ch1_term_en", 0)
		self.fc7.write("cnfg_dio5_ch2_term_en", 0)
		self.fc7.write("cnfg_dio5_ch3_term_en", 0)
		self.fc7.write("cnfg_dio5_ch4_term_en", 0)
		self.fc7.write("cnfg_dio5_ch5_term_en", 0)
		self.fc7.write("cnfg_dio5_ch1_threshold", threshold)
		self.fc7.write("cnfg_dio5_ch2_threshold", threshold)
		self.fc7.write("cnfg_dio5_ch3_threshold", threshold)
		self.fc7.write("cnfg_dio5_ch4_threshold", threshold)
		self.fc7.write("cnfg_dio5_ch5_threshold", threshold)
		self.fc7.write("ctrl_dio5_load_config" , 1)

	def read_scan_out_vector(self, lenght=188):
		data = self.fc7.blockRead("scanchain_test_response_o_sel", lenght, 0)
		rep = []
		for dd in data[::-1]:
			rep.extend( bin(to_number(dd,32,0)).lstrip('-0b').zfill(32) )
			#print(bin(dd))
		rpvect = np.array(rep, dtype=int)
		return rpvect

	def scanchain_test(self, input_vector, expected_response, input_mask, mode='capture', reset_fw=False, reset_chip=False):
		if(reset_fw):
			reset(); time.sleep(0.1)
			utils.activate_I2C_chip(self.fc7)
			self.enable_dio5_scanchain(threshold=10)
		if(reset_chip):
			self.ssa.reset()
		expected_response = expected_response
		self.fc7.blockWrite("cnfg_ssa_scanchain_vector", self.split_bin(input_vector))
		self.fc7.blockWrite("cnfg_ssa_scanchain_response", self.split_bin(expected_response))
		self.fc7.blockWrite("cnfg_ssa_scanchain_mask", self.split_bin(input_mask))
		self.fc7.write("cnfg_ssa_scanchain_is_test_mode",1)
		self.fc7.write("cnfg_ssa_scanchain_start_test",0)
		if (mode=='capture'):
			self.fc7.write("cnfg_ssa_scanchain_is_capture_test",1)
			self.fc7.write("cnfg_ssa_scanchain_is_reset_test",0)
			self.fc7.write("cnfg_ssa_scanchain_is_scanchain_test",0)
		elif (mode=='reset'):
			self.fc7.write("cnfg_ssa_scanchain_is_capture_test",0)
			self.fc7.write("cnfg_ssa_scanchain_is_reset_test",1)
			self.fc7.write("cnfg_ssa_scanchain_is_scanchain_test",0)
		elif (mode=='scan'):
			self.fc7.write("cnfg_ssa_scanchain_is_capture_test",0)
			self.fc7.write("cnfg_ssa_scanchain_is_reset_test",0)
			self.fc7.write("cnfg_ssa_scanchain_is_scanchain_test",1)
		else:
			return 'error'
		self.fc7.write("cnfg_ssa_scanchain_start_test",1)

		if (mode=='reset'):
			time.sleep(0.1)
			self.ssa.reset()
			self.fc7.write("cnfg_ssa_scanchain_is_continue_reset_test",1)
			time.sleep(0.1)

		time.sleep(0.010);

		scanchain_test_done               = self.fc7.read("scanchain_test_done")
		scanchain_comparator              = self.fc7.read("scanchain_comparator")
		scanchain_comparator_negedge      = self.fc7.read("scanchain_comparator_negedge")
		scanchain_comparator_negedge_next = self.fc7.read("scanchain_comparator_negedge_next")
		scanchain_comparator_miscompares  = self.fc7.read("scanchain_comparator_miscompares")

		if(not scanchain_test_done): ptype='info'
		elif(scanchain_comparator or scanchain_comparator_negedge or scanchain_comparator_negedge_next): ptype='good'
		else: ptype='error'
		utils.print( 'test_done            = {:3d}'.format(scanchain_test_done               ), ptype)
		utils.print( 'comparator           = {:3d}'.format(scanchain_comparator              ), ptype)
		utils.print( 'comparator_neg_pre   = {:3d}'.format(scanchain_comparator_negedge      ), ptype)
		utils.print( 'comparator_neg_next  = {:3d}'.format(scanchain_comparator_negedge_next ), ptype)
		utils.print( 'miscompares          = {:3d}'.format(scanchain_comparator_miscompares  ), ptype)
		scan_out = self.read_scan_out_vector()
		scan_out = int("".join(str(i) for i in scan_out),2)
		mismatch = (scan_out ^ expected_response) & input_mask
		test_result = (scanchain_comparator or scanchain_comparator_negedge or scanchain_comparator_negedge_next)
		return mismatch, scan_out, scanchain_test_done, scanchain_comparator_miscompares, test_result

	def split_bin(self, word):
		N = 32
		binword = bin(word)[2:]
		# nbits = int((np.floor(len(binword)/N)+1)*N)
		nbits = 6016
		binword = binword.zfill(nbits)
		array = [int('0b'+binword[i:i+N] ,2) for i in range(0, len(binword), N)][::-1]
		return array

	def launch_capture_all_vectors(self, nvectors=725, filename = "ssa_methods/Configuration/vectors_for_test_capture.txt", start_from=0):
		fin = open(filename, 'rt')
		lines = fin.readlines()
		reset(); time.sleep(0.1);
		utils.activate_I2C_chip(self.fc7)
		self.ssa.reset()
		self.enable_dio5_scanchain(threshold=10)
		mismatches = []
		for i in range(start_from, nvectors-1):
			print('___________________________________')
			print('Starting vector {:d}'.format(i))
			shift = i*10
			input_vector = np.int('0b' + lines[0+shift].rstrip() ,2)
			expected_response = np.int('0b' + lines[1+shift].rstrip() ,2)
			input_mask = np.int('0b' + lines[2+shift].rstrip() ,2)
			debug = lines[3+shift]
			rt = mismatch, scan_out, test_done, miscompares, test_result= self.scanchain_test(
				mode='capture', reset_fw=False, reset_chip=False,
				input_vector=input_vector, expected_response=expected_response, input_mask=input_mask)
			if(not test_done):
				reset();
				utils.activate_I2C_chip(self.fc7)
				self.enable_dio5_scanchain(threshold=10)
				rt = mismatch, scan_out, test_done, miscompares, test_result= self.scanchain_test(
					mode='capture', reset_fw=False, reset_chip=False,
					input_vector=input_vector, expected_response=expected_response, input_mask=input_mask)
			if(not test_result and test_done):
				print(bin(mismatch))
				print('---------')
				mismatches.append(i)
				#print(bin(expected_response))
				#print('---------')
				#print(bin(scan_out))
				#print('---------')
		return mismatches
		#return rt

	def launch_reset_test_all_vectors(self, nvectors=2, filename = "ssa_methods/Configuration/vectors_for_test_reset.txt", start_from=0):
		fin = open(filename, 'rt')
		lines = fin.readlines()
		reset(); time.sleep(0.1);
		utils.activate_I2C_chip(self.fc7)
		self.ssa.reset()
		self.enable_dio5_scanchain(threshold=10)
		for i in range(start_from, nvectors):
			print('___________________________________')
			print('Starting vector {:d}'.format(i))
			shift = i*10
			input_vector = np.int('0b' + lines[0+shift].rstrip() ,2)
			expected_response = np.int('0b' + lines[1+shift].rstrip() ,2)
			input_mask = np.int('0b' + lines[2+shift].rstrip() ,2)
			debug = lines[3+shift]
			rt = self.scanchain_test(
				mode='reset', reset_fw=True, reset_chip=False,
				input_vector=input_vector, expected_response=expected_response, input_mask=input_mask)
		#return rt

	def launch_scan_test_all_vectors(self, nvectors=1, filename = "ssa_methods/Configuration/vectors_for_test_scan.txt", start_from=0):
		fin = open(filename, 'rt')
		lines = fin.readlines()
		reset(); time.sleep(0.1);
		utils.activate_I2C_chip(self.fc7)
		self.enable_dio5_scanchain(threshold=10)
		for i in range(start_from, nvectors):
			print('___________________________________')
			print('Starting vector {:d}'.format(i))
			shift = i*10
			input_vector = np.int('0b' + lines[0+shift].rstrip() ,2)
			expected_response = np.int('0b' + lines[1+shift].rstrip() ,2)
			input_mask = np.int('0b' + lines[2+shift].rstrip() ,2)
			debug = lines[3+shift]
			mismatch, scan_out, scanchain_test_done, scanchain_comparator_miscompares, test_result = self.scanchain_test(
				mode='scan', reset_fw=False, reset_chip=False,
				input_vector=input_vector, expected_response=expected_response, input_mask=input_mask)
			print(bin(mismatch))
			print('---------')
			print(bin(expected_response))
			print('---------')
			print(bin(scan_out))
			print('---------')
		#return rt

	#############################################################################

	def prova2(self):
		fc7.write("cnfg_ssa_scanchain_start_test",0)
		fc7.write("cnfg_ssa_scanchain_start_test",1)

	def prova1(self):
		self.fc7.write("cnfg_ssa_scanchain_is_capture_test",0)
		time.sleep(1)
		self.fc7.write("cnfg_ssa_scanchain_is_reset_test",0)
		time.sleep(1)
		self.fc7.write("cnfg_ssa_scanchain_is_scanchain_test",1)
		time.sleep(1)
		fc7.write("cnfg_ssa_scanchain_start_test",1)

	def prova3(self, repeat=3, threshold=10):
		reset()
		time.sleep(0.5)
		utils.activate_I2C_chip(self.fc7)
		self.ssa.reset()
		self.enable_dio5_scanchain(threshold=threshold)
		for i in range(repeat):
			print( self.try_scanchain() )
			print('------------------------')

	def try_scanchain(self):
		time.sleep(0.1); self.fc7.write("cnfg_ssa_scanchain_is_test_mode",1)
		time.sleep(0.1); self.fc7.write("cnfg_ssa_scanchain_start_test",0)
		time.sleep(0.1); self.fc7.write("cnfg_ssa_scanchain_is_capture_test",1)
		time.sleep(0.1); self.fc7.write("cnfg_ssa_scanchain_is_reset_test",0)
		time.sleep(0.1); self.fc7.write("cnfg_ssa_scanchain_is_scanchain_test",0)
		time.sleep(0.1); self.fc7.write("cnfg_ssa_scanchain_start_test",1)
		time.sleep(1);
		print( 'test_done            = {:3d}'.format( self.fc7.read("scanchain_test_done")               ))
		print( 'comparator           = {:3d}'.format( self.fc7.read("scanchain_comparator")              ))
		print( 'comparator_neg_pre   = {:3d}'.format( self.fc7.read("scanchain_comparator_negedge")      ))
		print( 'comparator_neg_next  = {:3d}'.format( self.fc7.read("scanchain_comparator_negedge_next") ))
		print( 'miscompares          = {:3d}'.format( self.fc7.read("scanchain_comparator_miscompares")  ))
		scan_out = self.read_scan_out_vector()
		for i in scan_out: print(i, end='')
		print('\n')
		return scan_out





#input_vector = 0b

#input_vector = 0b

#input_vector = int('0b'+'10000000000000000000000000000000'*186 + '11111100'*4, 2)

#expected_response = 0b

#input_mask = 0b

	#   cnfg_ddr3_scanchain_test_enable          40018000    00000002     1     1 *enable scanchain test mode
	#   cnfg_ssa_scanchain_start_test            4001A000    00000001     1     1 * scanchain test start
	#   cnfg_ssa_scanchain_is_scanchain_test     4001A000    00000002     1     1 * scanchain is_scan_test
	#   cnfg_ssa_scanchain_is_reset_test         4001A000    00000004     1     1 * scanchain is_reset test
	#   cnfg_ssa_scanchain_is_capture_test       4001A000    00000008     1     1 * scanchain is capture test
	#   cnfg_ssa_scanchain_vector                4001A001    ffffffff     1     1 * scanchain input vector
	#   cnfg_ssa_scanchain_response              4001A002    ffffffff     1     1 * scanchain input response
	#   cnfg_ssa_scanchain_mask                  4001A003    ffffffff     1     1 * scanchain input mask

	###################################################
